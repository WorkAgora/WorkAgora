service: workaurora-api

frameworkVersion: "2"

provider:
  name: aws
  runtime: nodejs14.x
  region: eu-central-1
  stage: ${opt:stage, 'dev'}
  apiGateway:
    restApiId: ${opt:restApiId}
  environment:
    USERS_TABLE: ${self:service}-users-${opt:stage, 'dev'}
    RATINGS_TABLE: ${self:service}-ratings-${opt:stage, 'dev'}
    MESSAGES_TABLE: ${self:service}-messages-${opt:stage, 'dev'}
    DEALS_TABLE: ${self:service}-deals-${opt:stage, 'dev'}
  iamRoleStatements:
    - Effect: Allow
      Action:
        - dynamodb:*
      Resource: "*"

functions:
  register:
    handler: handler.register
    events:
      - http:
          path: api/register
          method: post

  login:
    handler: handler.login
    events:
      - http:
          path: api/login
          method: post
  rateWorker:
    handler: handler.rateWorker
    events:
      - http:
          path: /api/rating/worker
          method: post
  rateRecruiter:
    handler: handler.rateRecruiter
    events:
      - http:
          path: /api/rating/recruiter
          method: post
  getWorkerRating:
    handler: handler.getWorkerRating
    events:
      - http:
          path: /api/rating/worker/{workerAddress}
          method: get
  getRecruiterRating:
    handler: handler.getRecruiterRating
    events:
      - http:
          path: /api/rating/recruiter/{recruiterAddress}
          method: get
  sendMessage:
    handler: handler.sendMessage
    events:
      - http:
          path: /api/message/send
          method: post
  getConversation:
    handler: handler.getConversation
    events:
      - http:
          path: /api/message/{senderAddress}/{recipientAddress}
          method: get
  createDeal:
    handler: handler.createDeal
    events:
      - http:
          path: /api/deals
          method: post
  getDeal:
    handler: handler.getDeal
    events:
      - http:
          path: /api/deals/{dealId}
          method: get
  updateDealStatus:
    handler: handler.updateDealStatus
    events:
      - http:
          path: /api/deals/{dealId}/status
          method: put

resources:
  Resources:
    usersTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:provider.environment.USERS_TABLE}
        AttributeDefinitions:
          - AttributeName: walletAddress
            AttributeType: S
          - AttributeName: email
            AttributeType: S
        KeySchema:
          - AttributeName: walletAddress
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
    ratingsTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:provider.environment.RATINGS_TABLE}
        AttributeDefinitions:
          - AttributeName: id
            AttributeType: S
        KeySchema:
          - AttributeName: id
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
    messagesTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:provider.environment.MESSAGES_TABLE}
        AttributeDefinitions:
          - AttributeName: conversationId
            AttributeType: S
          - AttributeName: timestamp
            AttributeType: N
        KeySchema:
          - AttributeName: conversationId
            KeyType: HASH
          - AttributeName: timestamp
            KeyType: RANGE
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
    dealsTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:provider.environment.DEALS_TABLE}
        AttributeDefinitions:
          - AttributeName: id
            AttributeType: S
        KeySchema:
          - AttributeName: id
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1

plugins:
  - serverless-offline
  - serverless-esbuild
